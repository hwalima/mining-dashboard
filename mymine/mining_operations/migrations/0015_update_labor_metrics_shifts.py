# Generated by Django 5.1.4 on 2024-12-13 19:25

from django.db import migrations
from django.utils import timezone

def update_labor_metrics_shifts(apps, schema_editor):
    LaborMetric = apps.get_model('mining_operations', 'LaborMetric')
    Shift = apps.get_model('mining_operations', 'Shift')
    db_alias = schema_editor.connection.alias

    # Create a mapping of department IDs to shifts
    shift_mapping = {}
    for shift in Shift.objects.using(db_alias).all():
        if shift.department_id not in shift_mapping:
            shift_mapping[shift.department_id] = {}
        
        if 'Morning' in shift.name:
            shift_mapping[shift.department_id]['MORNING'] = shift
        elif 'Afternoon' in shift.name:
            shift_mapping[shift.department_id]['AFTERNOON'] = shift
        elif 'Night' in shift.name:
            shift_mapping[shift.department_id]['NIGHT'] = shift

    # Update labor metrics with new shift references
    for labor_metric in LaborMetric.objects.using(db_alias).all():
        if labor_metric.department_id in shift_mapping:
            shift_name = None
            if hasattr(labor_metric, 'shift') and labor_metric.shift:
                if isinstance(labor_metric.shift, str):
                    shift_name = labor_metric.shift
                elif hasattr(labor_metric.shift, 'name'):
                    if 'Morning' in labor_metric.shift.name:
                        shift_name = 'MORNING'
                    elif 'Afternoon' in labor_metric.shift.name:
                        shift_name = 'AFTERNOON'
                    elif 'Night' in labor_metric.shift.name:
                        shift_name = 'NIGHT'

            if shift_name and shift_name in shift_mapping[labor_metric.department_id]:
                labor_metric.shift = shift_mapping[labor_metric.department_id][shift_name]
                labor_metric.save()

def reverse_update_labor_metrics_shifts(apps, schema_editor):
    LaborMetric = apps.get_model('mining_operations', 'LaborMetric')
    db_alias = schema_editor.connection.alias
    LaborMetric.objects.using(db_alias).all().update(shift=None)

class Migration(migrations.Migration):

    dependencies = [
        ('mining_operations', '0014_create_shifts'),
    ]

    operations = [
        migrations.RunPython(update_labor_metrics_shifts, reverse_update_labor_metrics_shifts),
    ]
